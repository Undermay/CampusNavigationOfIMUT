/*/********************************************************************
*文件名称：内蒙古工业大学金川校区校园导航.cpp
*内容摘要：校园系统各个模块函数
*完成对景点信息的查询、删除、修改等功能
*其他内容：无
*********************************************************************/


#define INFINITY      10000       //图的矩阵中A（i，i）记为0，若没有通路，记为INFINITY = 10000
#define MAX_VERTEX_NUM     100   //最大景点数定为40

#include<stdlib.h>  //包含system等系统调用
#include<stdio.h>
#include<conio.h>  //定义了通过按键盘产生的对应操作
#include<string.h>  //在使用到字符数组时需要使用



typedef struct ArCell  //单独定义有关边的结构体
{
	int adj;    //路径长度
}AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM]; //边长度的矩阵



typedef struct   //定义一个景点的结构体（图中顶点表示主要景点），存放景点的编号、名称、简介等信息
{
	char name[50];
	int num;
	char introduction[200];//简介
}infotype;


typedef struct  //定义一个导游图
{
	infotype vexs[MAX_VERTEX_NUM];//定义景点数组，每个景点包括各自的编号、名称、简介信息
	AdjMatrix arcs;  //定义边长矩阵
	int vexnum, arcnum;  //定义一个导游图的（景点）顶点数和路径数（边数）
}MGraph;

//声明函数
void Floyd(MGraph *G);
void xs();
void cmd(void);
MGraph InitGraph(void);//对图初始化
void Menu(void);//创建菜单选项
void Search(MGraph *G);//查看某个景点的信息
void change(MGraph * G);//修改景点信息
void dele(MGraph * G);//删除该景点及其相关路径
void ShortPath_DIJ(MGraph * G);//用Dijkstra计算两个景点的最短路径


/*****************************************
*功能描述：输出系统菜单主页面
*输入参数：无
*输出参数：无
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/

void Menu()  //输出菜单主页的函数
{

	printf("\n                                                                   欢迎来到内蒙古工业大学金川校区 \n");
	printf("                                                               ··~~~~~~~~~~~~~····~~~~~~~~~~~~~~~~\n");
	printf("                                                              。。    1.浏览 校园 景色             。。\n");
	printf("                                                                。。  2.寻找景点之间最佳路径           。。\n");
	printf("                                                               。。   3.查找 从该场所出发的 浏览路线            。。\n");
    printf("                                                               。。   4.查看 场所 信息               。。\n");
	printf("                                                             。。     5.删除一个场所及其相关路径          。。\n");
	printf("                                                               。。   6.修改 场所 信息               。。\n");
	printf("                                                               。。   7.退出                       。。\n");
	printf("                                                                ··~~~~~~~~~~~~~····~~~~~~~~~~~~~~~~\n");
	printf("                                                                  亲 通过右上角窗口最大化可以获得最佳体验呦！(1-6菜单选项):    ");

}
/*****************************************
*功能描述：输出校园导游路线图
*输入参数：无
*输出参数：无
*返回值： 输出路线图
*其他说明：消息字段之间用分号（；）分隔
*****************************************/
void  xs()
{

	printf("\t\t **--------------------------------------------工-----大-----地-----图----------------------------------------------------------**\n\n");
	printf("\t\t                                                                                                               \n");
	printf("  ___________                                                   ___________                 ________                               ___________\n");
	printf("  | 0.体检  |                                                   |1.操场   |                 | 2.校门|                               |  3.银杏 |             \n");
	printf("  |   中心  |························· |         |········ |    北 | ···············|    景观 |   \n");
	printf("  -----·-----                                           ···\\----  ----//                |       |                               ----·---\n");
	printf("       ·           ···················                  ·                       ·                                       ·\n");
	printf("   ____·_____      ·                                        ___________    ·                         ·                                    ·				           \n");
	printf("   | 4.邯郸音乐厅|····················· | 5.图书馆 |     ·                            ·                                ·                    \n");
	printf("   ----·-----  ·                                           |          |      ·                               ·                            ·              \n");
	printf("       ·           ·                                       -----  ------      ·                                  ·                        ·                \n");
	printf("       ·              ·          _______                          ·           ·                                     ·                    ·           \n");
	printf("       ·             	 ·       | 6. 信  |                     ___·__________  ·                                        ·            ____·________                     \n");
	printf("       ·                   ·    |    息  |                     | 7.花园    |     ·                                           ·····|  9.餐厅 |                        \n");
	printf("  _____·____                  · |    学  |·········· |   景观    |      ·                                         ····· |         |                   \n");
	printf("  |  8.网计 |                     |    部  |                     ------- -----·     ·                                    ·             ----·-----      \n");
	printf("  |   学院  |                     ----------                       ·          ·     ·      ___________________      ·                                          \n");
	printf("  ----  ----- ·                             ·                    ·           ·     ·     //  |10.校门东|   \\  ·                                        \n");
	printf("                   ·                           ·                 ·             ·     ·   |   |         |   |            \n");
	printf("                       ·                         ·               ·              ····· |   |         |   |                                          \n");
	printf("                            ·                      ·             ·           ·            \\----------------//                                 \n");
	printf("                                  ·                   ·  ^**************^  ·                                                               \n");
	printf("                                       ·  ·  ·  · ·  \\ 11.校门南  //                                                                                \n");
	printf("                                                             |        |                                                 \n");                                                                                  
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
	printf("\n");
}
/*****************************************
*功能描述：控制从键盘输入按钮的函数
*输入参数：数字
*输出参数：路径图  各个函数模块调用
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/

void cmd(void)  //控制从键盘输入按钮的函数
{
	int i;
	MGraph b;
	b = InitGraph(); //对导游图b用函数InitGraph()进行初始化，变成中北大学朔州校区的导游图~
	Menu();

	scanf("%d", &i);
	while (i != 7)
	{
		switch (i)
		{
			//输入每个数字后都会出现对应的功能以及金川校区的导游图和菜单 
			case 1:system("cls"); xs(); Menu(); break; //先进行一个清屏操作"cls"
			case 2:system("cls"); xs(); Floyd(&b); Menu(); break;
			case 3:system("cls"); xs(); ShortPath_DIJ(&b); Menu(); break;
			case 4:system("cls"); xs(); Search(&b); Menu(); break;
			case 5:system("cls"); xs(); dele(&b); Menu(); break;
			case 6:system("cls"); xs(); change(&b); Menu(); break;
			case 7:exit(1); break;
			default:break;
		}

		scanf("%d", &i);
	}
}

/*****************************************
*功能描述：创建图
*输入参数：对图进行初始化
*输出参数：输出地图基本信息
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/
MGraph InitGraph(void)  //对图初始化，变成内蒙古工业大学金川校区的地图~
{
	MGraph G;
	int i, j;
//	G.vexnum = 16;
	G.vexnum = 12;
	G.arcnum = 50; 
	for (i = 0; i<G.vexnum; i++)
		G.vexs[i].num = i;

	strcpy(G.vexs[0].name, "体检中心");
	strcpy(G.vexs[0].introduction, "位于学校的西北方向，里面有众多科室，卫生干净而整齐，服务良好。");
	strcpy(G.vexs[1].name, "操场");
	strcpy(G.vexs[1].introduction, "位于学校的西北方向，供学生体育锻炼用的场地，学生们在这里尽情的挥洒青春和汗水。");
	strcpy(G.vexs[2].name, "校门北");
	strcpy(G.vexs[2].introduction, "位于学校的北面，校门虽然不大，却为让同学们提供了极为方便的通道。");
	strcpy(G.vexs[3].name, "银杏景观");
	strcpy(G.vexs[3].introduction, "位于学校的北偏东方向，银杏树宏伟壮观，是学生散步，谈心的好去处。");
	strcpy(G.vexs[4].name, "邯郸音乐厅");
	strcpy(G.vexs[4].introduction, "音乐厅呈长方形，虽不是琼楼玉宇，却亦是学校不可或缺的一部分，为学生娱乐的主要场所。");
	strcpy(G.vexs[5].name, "图书馆");
	strcpy(G.vexs[5].introduction, "图书馆宏伟壮丽，内部错落有致，是一个搜集、整理、收藏图书资料供学生阅览、参考学习的地方。");
	strcpy(G.vexs[6].name, "信息学部");
	strcpy(G.vexs[6].introduction, "位于学校的西偏南方向，是负责信息科学领域相关基础研究的资助与项目管理的地方。");
	strcpy(G.vexs[7].name, "花园景观");
	strcpy(G.vexs[7].introduction, "和银杏景观一样，是学生散步，谈心的好去处。");
	strcpy(G.vexs[8].name, "网计学院");
	strcpy(G.vexs[8].introduction, "网计学院目前设有许多计算机类专业，如软件工程，大数据，人工智能等。");
	strcpy(G.vexs[9].name, "餐厅");
	strcpy(G.vexs[9].introduction, "餐厅占地面积宽广，里面有众多珍贵菜品，餐厅整齐而干净，服务良好。。");
	strcpy(G.vexs[10].name, "校门东");
	strcpy(G.vexs[10].introduction, "学校的小东门，是同学们取外卖的好地方，骑手会不约而同的送到东门。");
	strcpy(G.vexs[11].name, "校门南");
	strcpy(G.vexs[11].introduction, "学校的正门，校门豪华，气势磅礴。");

	for (i = 0; i<G.vexnum; i++)
		for (j = 0; j<G.vexnum; j++)
		{
			G.arcs[i][j].adj = INFINITY;
			G.arcs[0][1].adj = 35; G.arcs[0][4].adj = 20;
			G.arcs[1][0].adj = 35; G.arcs[1][2].adj = 20; G.arcs[1][4].adj = 48; G.arcs[1][10].adj = 30;
			G.arcs[2][1].adj = 20; G.arcs[2][3].adj = 10; G.arcs[2][9].adj = 10;
			G.arcs[3][2].adj = 10; G.arcs[3][9].adj = 10; 
			G.arcs[4][0].adj = 20; G.arcs[4][1].adj = 48; G.arcs[4][5].adj = 40; G.arcs[4][6].adj = 50; G.arcs[4][8].adj = 50;
			G.arcs[5][4].adj = 40; G.arcs[5][7].adj = 10;
			G.arcs[6][4].adj = 50; G.arcs[6][7].adj = 10; G.arcs[6][11].adj = 40;
			G.arcs[7][5].adj = 10; G.arcs[7][6].adj = 10; G.arcs[7][10].adj = 20;G.arcs[7][11].adj = 50;
			G.arcs[8][4].adj = 50; G.arcs[8][11].adj = 40;
			G.arcs[9][3].adj = 10; G.arcs[9][2].adj = 10; G.arcs[9][10].adj = 10;
			G.arcs[10][1].adj = 30; G.arcs[10][7].adj = 20; G.arcs[10][9].adj = 10; G.arcs[10][11].adj = 60;
			G.arcs[11][6].adj = 40; G.arcs[11][7].adj = 50; G.arcs[11][8].adj = 40; G.arcs[11][10].adj = 60;

		}

	return G;
}


/*****************************************
*功能描述：查看某个场所的相关信息
*输入参数：数字4
*输出参数： 景点的相关内容
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/

void Search(MGraph *G)//查看某个景点的相关信息
{
	int k, flag = 1;
	while (flag)
	{
		printf("请输入要查询的场所编号:");
		scanf("%d", &k);
		if (k<0 || k>=G->vexnum)
		{
			printf("场所编号不存在!请重新输入场所编号:");
		}
		else
		{
			flag = 0;  //跳出while结构,执行下面的输出
		}
	}
	printf("***********************************************************************************\n");
	printf("* 编号 * 场所名称        * 简介                                                   *  \n");
	printf("* %-4d * %-16s*%-56s* \n", G->vexs[k].num, G->vexs[k].name, G->vexs[k].introduction);
	printf("***********************************************************************************\n");

}


/*****************************************




/*****************************************
*功能描述：删除某场所相关内容
*输入参数：数字5
*输出参数：删除该景点  输出  正在建设中
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/

void dele(MGraph *G)//删除某景点
{

	int k, flag = 1;
	while (flag)
	{
		printf("请输入要删除的场所编号:");
		scanf("%d", &k);
		if (k<0 || k>G->vexnum)
		{
			printf("场所编号不存在!请重新输入场所编号:");
			scanf("%d", &k);
		}
		if (k >= 0 && k<G->vexnum)
			flag = 0;
	}

	strcpy(G->vexs[k].name, "此处正在建设中**");
	strcpy(G->vexs[k].introduction, "无");

	printf("删除成功！");


}


/*****************************************
*功能描述：修改完善某景点的基本信息
*输入参数：数字 6
*输出参数：  修改完的信息
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/

void change(MGraph *G)//修改完善某景点的基本信息
{
	char m[100];
	int k, flag = 1;
	while (flag)
	{
		printf("请输入要修改的场所编号:");
		scanf("%d", &k);
		if (k<0 || k>G->vexnum)
		{
			printf("场所编号不存在!请重新输入场所编号:");
			scanf("%d", &k);
		}
		if (k >= 0 && k<G->vexnum)
			flag = 0;

	}
	printf("请输入该场所要修改的信息内容：");
	scanf("%s", m, 100);
	strcpy(G->vexs[k].introduction, m);
	printf("修改成功！");


}


/*****************************************
*功能描述：计算出一个景点到其他景点的最短路线
*输入参数：两个景点的编号
*输出参数：输出最近路线  以及路线长度
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/
void ShortPath_DIJ(MGraph * G) {
    int v;
    int v0;
    int w;
    int i;
    int min;
    int t = 0;
    int x;
    int flag;
    int final[50];
    int D[50];
    int p[50][50];

    flag = 1;
    while (flag) {
        printf("请输入一个起始景点编号:");
        scanf("%d", &v0);
        if (v0 < 0 || v0 >= G->vexnum) {
            printf("景点编号不存在!请重新输入景点编号:");
        }
        else {
            flag = 0;
        }
    }

    for (v = 0; v < G->vexnum; v++) {
        final[v] = 0;
        D[v] = (v == v0 ? 0 : INT_MAX);
        for (w = 0; w < G->vexnum; w++) {
            p[v][w] = 0;
        }
    }

    for (i = 1; i < G->vexnum; i++) {
        min = INT_MAX;
        for (w = 0; w < G->vexnum; w++) {
            if (!final[w] && D[w] < min) {
                v = w;
                min = D[w];
            }
        }
        final[v] = 1;

        for (w = 0; w < G->vexnum; w++) {
            if (!final[w] && G->arcs[v][w].adj != INT_MAX && min + G->arcs[v][w].adj < D[w]) {
                D[w] = min + G->arcs[v][w].adj;
                for (x = 0; x < G->vexnum; x++) {
                    p[w][x] = p[v][x];
                }
                p[w][w] = 1;
            }
        }
    }

    for (v = 0; v < G->vexnum; v++) {
        if (v != v0) {
            printf("从%s到%s的最短路径：", G->vexs[v0].name, G->vexs[v].name);
            if (D[v] == INT_MAX) {
                printf("路径不存在\n");
            } else {
                printf("长度：%d \t", 10*D[v]);
                printf("%s", G->vexs[v0].name);
                for (w = 0; w < G->vexnum; w++) {
                    if (p[v][w] && w != v0)
                        printf(" --> %s", G->vexs[w].name);
                        if(G->vexs[v].name == G->vexs[w].name){
                        	break;
						}
                }
                printf("\n");
            }
        }
    }
}

/*****************************************
*功能描述：计算出任意两个景点的最短路线
*输入参数：一个起始景点
*输出参数：输出一个景点到其他景点的路线
*返回值：无
*其他说明：消息字段之间用分号（；）分隔
*****************************************/
void PrintPath(MGraph *G, int k, int j, int p[][16][16]) {
    if (p[k][j][k]) {
        printf("*%s* ", G->vexs[k].name);
        if (k != j) {
            int u;
            for (u = 0; u < G->vexnum; u++) {
                if (p[k][j][u] && u != k && u != j) {
                    PrintPath(G, u, j, p);
                    break;
                }
            }
        }
    } else {
        printf("*%s* ", G->vexs[j].name);
    }
}

void Floyd(MGraph *G) {
    int v, u, w, k, j;
    int p[16][16][16], D[16][16];

    // 初始化距离和路径数组
    for (v = 0; v < G->vexnum; v++) {
        for (w = 0; w < G->vexnum; w++) {
            D[v][w] = G->arcs[v][w].adj;

            for (u = 0; u < G->vexnum; u++) {
                p[v][w][u] = 0;
            }

            if (D[v][w] < INFINITY) {
                p[v][w][v] = 1;
                p[v][w][w] = 1;
            }
        }
    }

    // 计算最短路径和路径数组
    for (u = 0; u < G->vexnum; u++) {
        for (v = 0; v < G->vexnum; v++) {
            for (w = 0; w < G->vexnum; w++) {
                if (D[v][u] + D[u][w] < D[v][w]) {
                    D[v][w] = D[v][u] + D[u][w];
                    memcpy(p[v][w], p[v][u], sizeof(int) * 16);
                }
            }
        }
    }

    // 输出路径
    printf("请输入出发点和目的地的编号:");
    scanf("%d%d", &k, &j);

    while (k < 0 || k >= G->vexnum || j < 0 || j >= G->vexnum) {
        printf("场所编号不存在!请重新输入出发点和目的地的编号:");
        scanf("%d%d", &k, &j);
    }

//    printf("*%s* ", G->vexs[k].name);
    if (k != j) {
        PrintPath(G, k, j, p);
        printf("*%s* ", G->vexs[j].name);
    }
    printf("*总路线长%dm*\n", D[k][j] * 10);
}



int main()  //主函数
{
	cmd();
}
